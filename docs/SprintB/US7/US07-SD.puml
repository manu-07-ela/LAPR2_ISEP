@startuml
autonumber
'hide footbox
actor "Administrator" as ADM

participant ":RegisterEmployeeUI" as UI
participant ":RegisterEmployeeController" as CTRL
participant ":Company" as COMP
participant ":OrganizationRoleMapper" as MAPPER
participant "store : EmployeeStore" as STORE
participant "empDto : EmployeeDto" as EMPDTO


activate ADM
ADM -> UI : starts the creation of a new employee
activate UI
UI -> CTRL: getListOfOrganizationRoles()
activate CTRL
CTRL -> COMP : getListOfOrganizationRoles()
activate COMP
COMP --> "listOrgRoles : List<OrganizationRole>"** : create()
note over "listOrgRoles : List<OrganizationRole>": loop to populate listOrganizationRoles is omitted
COMP -->CTRL : listOrgRoles
deactivate COMP
CTRL -> MAPPER : toDTO(listOrgRoles)
activate MAPPER
MAPPER --> "listOrgRolesDTO : List<OrganizationRoleDTO>"** : create()
loop for each object in listOrgRoles
MAPPER ->"listOrgRoles : List<OrganizationRole>" : orgRole = getOrganizationRoles(i)
activate "listOrgRoles : List<OrganizationRole>"
deactivate "listOrgRoles : List<OrganizationRole>"

MAPPER->MAPPER : orgRoleDto = toDto(organizationRole)
activate MAPPER
deactivate MAPPER
MAPPER --> "orgRoleDto: organizationRoleDto"** : create()
MAPPER -> "listOrgRolesDTO : List<OrganizationRoleDTO>" : addOrgRole(orgRoleDto)
activate "listOrgRolesDTO : List<OrganizationRoleDTO>"
deactivate "listOrgRolesDTO : List<OrganizationRoleDTO>"
end
MAPPER-->CTRL : listOrgRolesDto
CTRL-->UI : listOrgRolesDto
UI-->ADM : show the employees roles
deactivate MAPPER
deactivate COMP
deactivate CTRL
deactivate UI



ADM -> UI : select the desired role
activate UI
UI -> CTRL : createOrganizationRole(orgRoleDto)
activate CTRL
CTRL -> COMP: orgRole = createOrganizationRole(orgRoleDto)
activate COMP
COMP -> "orgRoleDto: organizationRoleDto" : designation = getDesignation()
activate "orgRoleDto: organizationRoleDto"

"orgRoleDto: organizationRoleDto"-->"orgRole : OrganizationRole"** : create(designation)

alt orgRole = specialist doctor
UI --> ADM : request data (name, address, phoneNumber, email,socCode, doctorIndexNumber)
else
UI --> ADM : request data (name, adress, phoneNumber, email, socCode)
deactivate "orgRoleDto: organizationRoleDto"
deactivate COMP
deactivate CTRL
deactivate UI
end


ADM -> UI : types requested data
activate UI
alt orgRole = specialist doctor
UI -> CTRL : createSpecialistDoctor(empDto)
activate CTRL
CTRL -> COMP : emp = createSpecialistDoctor(empDto)
deactivate CTRL
activate COMP
COMP -> STORE : store = getEmployeeStore()
activate STORE

STORE ->EMPDTO : name = getname()
activate EMPDTO
STORE->EMPDTO : adress = getAdress()
STORE->EMPDTO : phoneNumber = getPhoneNumber()
STORE->EMPDTO : socCode = getSocCode()
STORE->EMPDTO : doctorIndexNumber = getDoctorIndexNumber()
deactivate EMPDTO
deactivate COMP
STORE -> "emp : specialistDoctor"** : create(name, adress, phoneNumber, email, socCode, orgRole, doctorIndexNumber)
deactivate STORE
else
UI -> CTRL : createEmployee(empDto)
activate CTRL
CTRL -> COMP : emp = createEmployee(empDto)
deactivate CTRL
activate COMP
COMP -> STORE : store = getEmployeeStore()
deactivate COMP
activate STORE
STORE ->EMPDTO : name = getname()
activate EMPDTO
STORE->EMPDTO : adress = getAdress()
STORE->EMPDTO : phoneNumber = getPhoneNumber()
STORE->EMPDTO : socCode = getSocCode()
deactivate EMPDTO
STORE -> "emp : Employee"** : create(name, adress, phoneNumber, email, socCode, orgRole)

deactivate STORE
end

UI --> ADM : show the data and request confirmation
deactivate UI

ADM ->UI : confirms the data
activate UI
UI -> CTRL : saveEmployee()
activate CTRL
CTRL -> STORE : saveEmployee(emp)

activate STORE

STORE ->STORE : validateEmployee(emp)
activate STORE
deactivate STORE

STORE ->STORE : addEmployee(emp)
activate STORE
deactivate STORE
UI --> ADM : informs operation success
deactivate CTRL
deactivate UI





@enduml