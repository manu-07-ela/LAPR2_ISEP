@startuml
autonumber
'hide footbox
actor "Administrator" as ADM

participant ":RegisterEmployeeUI" as UI
participant ":RegisterEmployeeController" as CTRL
participant ":Company" as COMP
participant "store : \n OrganizationRoleStore" as ORGSTORE
participant "store : EmployeeStore" as STORE
participant ":OrganizationRoleMapper" as MAPPER
participant ":EmployeeMapper" as MAPPEREMP
participant "orgRoleDto : \n organizationRoleDto" as ORGROLEDTO
participant "empDto : EmployeeDto" as EMPDTO
participant ":AuthFacade" as AUTHFACADE

activate ADM
ADM -> UI : starts the creation of a new employee
activate UI
UI -> CTRL: listOrgRolesDto = getListOfOrgRoles()
activate CTRL
CTRL -> COMP : store = getOrgRolesStore()
activate COMP
deactivate COMP
CTRL->ORGSTORE : listOrgRoles = getListOfOrgRoles()
activate ORGSTORE
deactivate ORGSTORE
CTRL->MAPPER : listOrgRolesDto = toDto(orgRole)
activate MAPPER
deactivate MAPPER
UI-->ADM : show the employees roles
CTRL-->UI : listOrgRolesDto
deactivate COMP
deactivate CTRL
deactivate UI



ADM -> UI : type the desired role
activate UI
UI -> CTRL : createOrganizationRole(orgRoleDto)
activate CTRL
CTRL -> ORGSTORE: orgRole = createOrganizationRole(orgRoleDto)
activate ORGSTORE
ORGSTORE -> MAPPER : orgRole = toOrgRole(orgRoleDto)
activate MAPPER
MAPPER -> ORGROLEDTO : designation = getDesignation()
activate ORGROLEDTO
deactivate ORGROLEDTO
MAPPER-->"orgRole : \n OrganizationRole"** : create(designation)

alt orgRole = specialist doctor
UI --> ADM : request data (name, address, phoneNumber, email,socCode, doctorIndexNumber)
else
UI --> ADM : request data (name, address, phoneNumber, email, socCode)
deactivate "orgRoleDto : \n organizationRoleDto"

deactivate MAPPER
deactivate ORGSTORE
deactivate CTRL
deactivate UI
end


ADM -> UI : types requested data
activate UI
UI --> ADM : show the data and request confirmation
deactivate UI

ADM ->UI : confirms the data
activate UI
alt orgRole = specialist doctor
UI -> CTRL : createSpecialistDoctor(empDto)
activate CTRL

CTRL -> COMP : store = getEmployeeStore()
activate COMP
deactivate COMP
CTRL -> STORE : emp = createSpecialistDoctor(empDto)

activate STORE
deactivate CTRL



STORE -> MAPPEREMP : emp = createSpecialistDoctor(empDto)
activate MAPPEREMP

MAPPEREMP ->EMPDTO : name = getName()
activate EMPDTO
MAPPEREMP->EMPDTO : address = getAddress()
MAPPEREMP->EMPDTO : email = getEmail()
MAPPEREMP->EMPDTO : phoneNumber = getPhoneNumber()
MAPPEREMP->EMPDTO : socCode = getSocCode()
MAPPEREMP->EMPDTO : doctorIndexNumber = getDoctorIndexNumber()
deactivate EMPDTO
deactivate COMP
MAPPEREMP -> "emp : specialistDoctor"** : create(name, address, phoneNumber, email, socCode, orgRole, doctorIndexNumber)
deactivate MAPPEREMP
deactivate STORE
else
UI -> CTRL : createEmployee(empDto)
activate CTRL
CTRL -> COMP : store = getEmployeeStore()
activate COMP
deactivate COMP

CTRL-> STORE : emp = createEmployee(empDto)
activate STORE
deactivate CTRL

STORE ->MAPPEREMP : emp = createEmployee(empDto)
activate MAPPEREMP


MAPPEREMP ->EMPDTO : name = getname()
activate EMPDTO
MAPPEREMP->EMPDTO : address = getAdress()
MAPPEREMP->EMPDTO : email = getEmail()
MAPPEREMP->EMPDTO : phoneNumber = getPhoneNumber()
MAPPEREMP->EMPDTO : socCode = getSocCode()
deactivate EMPDTO
MAPPEREMP -> "emp : Employee"** : create(name, address, phoneNumber, email, socCode, orgRole)
deactivate MAPPEREMP

deactivate STORE
end

activate UI
UI -> CTRL : saveEmployee()
activate CTRL
CTRL -> STORE : saveEmployee(emp)

activate STORE

STORE ->STORE : validateEmployee(emp)
activate STORE
deactivate STORE

STORE ->STORE : addEmployee(emp)
activate STORE
deactivate STORE
CTRL->AUTHFACADE : addUserWithRole(name, email, orgRole, psw)
deactivate STORE
activate AUTHFACADE



UI --> ADM : informs operation (in)success
deactivate AUTHFACADE
deactivate CTRL
deactivate UI





@enduml