@startuml
autonumber
'hide footbox
actor "Receptionist" as REP

participant ":RegisterTestUI" as UI
participant ":RegisterTestController" as CTRL
participant "Company" as COMP
participant "TestStore" as TS
participant "store: TestTypeStore" as TTS
participant ":TestTypeMapper" as MapperTT
participant "tt: Test" as TT


activate REP
REP -> UI : asks to register a test to be \n performed to a registered client
activate UI
UI --> REP : requests data (citizencardnumber, laborder)
deactivate UI

REP -> UI : types requested data
activate UI

UI -> CTRL : getTestTypeList()
activate CTRL

CTRL -> COMP : store=getTestTypeStore()
activate COMP
deactivate COMP

CTRL -> TTS : getTestTypeList()
activate TTS
TTS -> "listTestType:List<TestType>"** : get()

|||

TTS --> CTRL : listTestType
deactivate TTS

CTRL -> MapperTT :toDTO(listTestType)
activate MapperTT
ref over MapperTT
SD_populateList
end ref
MapperTT --> CTRL : TestTypeListDTO
deactivate MapperTT
CTRL --> UI : TestTypeListDTO
deactivate CTRL
UI --> REP : shows test types list and ask to select one
deactivate UI

REP -> UI : selects a test type
activate UI

UI -> CTRL : CreateTest(citizencardnumber, laborder)
activate CTRL

CTRL -> COMP : store = getTestStore()
activate COMP
|||
deactivate COMP

deactivate COMP

CTRL -> TS : tt = CreateTest(citizencardnumber, laborder)

activate TS
TS --> TT**: create(citizencardnumber, laborder)
deactivate TS

CTRL -> TS : validateTest(tt)
activate TS
deactivate TS
deactivate CTRL

UI --> REP : shows test types list and ask to select one

deactivate TS
deactivate COMP
deactivate CTRL
deactivate UI

REP -> UI : confirms the data
activate UI
UI -> CTRL : saveTest()
activate CTRL

CTRL -> TS : saveTest(tt)
activate TS

TS -> TS: validateTest(tt)
TS -> TS: addTest(tt)

CTRL --> UI: result

UI --> REP : informs operation success
deactivate TS
deactivate CTRL
deactivate UI

deactivate REP

@enduml